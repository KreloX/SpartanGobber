import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id("net.minecraftforge.gradle") version "6.+"
    id("org.spongepowered.mixin") version "0.7.+"
    id("io.github.0ffz.github-packages") version "[1,2)"
}

val minecraftVersion: String by project
val minecraftVersionRange: String by project
val forgeVersion: String by project
val forgeVersionRange: String by project
val loaderVersionRange: String by project
val mappingsChannel: String by project
val mappingsVersion: String by project
val modId: String by project
val modName: String by project
val modLicense: String by project
val modVersion: String by project
val modIssueTracker: String by project
val modHomepage: String by project
val modCredits: String by project
val modGroupId: String by project
val modAuthors: String by project
val modDescription: String by project
val packFormatNumber: String by project
val spartanWeaponryVersion: String by project
val spartanToolkitVersion: String by project
val spartanToolkitLimit: String by project
val gobberVersion: String by project
val gobberFile: String by project
val emiVersion: String by project

version = "$minecraftVersion-$modVersion"
group = modGroupId
base.archivesName = modId

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println(
    "Java: ${System.getProperty("java.version")}, " +
            "JVM: ${System.getProperty("java.vm.version")} (${System.getProperty("java.vendor")}), " +
            "Arch: ${System.getProperty("os.arch")}"
)
minecraft {
    mappings(mappingsChannel, mappingsVersion)

    // accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg") // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory(project.file("run"))

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property("forge.logging.markers", "REGISTRIES")

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property("forge.logging.console.level", "debug")

            mods {
                create(modId) {

                    source(sourceSets.main.get())
                }
            }
        }

        create("client") {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.

            property("forge.enabledGameTestNamespaces", modId)
        }

        create("server") {
            property("forge.enabledGameTestNamespaces", modId)
            args("--nogui")
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        create("gameTestServer") {
            property("forge.enabledGameTestNamespaces", modId)
        }

        create("data") {
            // example of overriding the workingDirectory set in configureEach above
            //workingDirectory (project.file("run-data"))

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args(
                "--mod", modId,
                "--all",
                "--output", file("src/generated/resources/"),
                "--existing", file("src/main/resources/")
            )
        }
    }
}

// Include resources generated by data generators.
sourceSets {
    main {
        resources {
            srcDir("src/generated/resources")
        }
    }
}

repositories {
    maven("https://cursemaven.com")
    maven("https://api.modrinth.com/maven")
    maven(githubPackage("KreloX/SpartanToolkit"))
}

dependencies {
    minecraft("net.minecraftforge:forge:$minecraftVersion-$forgeVersion")

    implementation(fg.deobf("maven.modrinth:spartan-weaponry:$spartanWeaponryVersion"))
    implementation(fg.deobf("krelox.spartantoolkit:spartantoolkit:$minecraftVersion-$spartanToolkitVersion"))

    implementation(fg.deobf("curse.maven:gobber-301700:$gobberFile"))

    runtimeOnly(fg.deobf("maven.modrinth:emi:$emiVersion+$minecraftVersion+forge"))
}

tasks.named<ProcessResources>("processResources").configure {
    val replaceProperties = mapOf(
        "minecraftVersion" to minecraftVersion, "minecraftVersionRange" to minecraftVersionRange,
        "forgeVersion" to forgeVersion, "forgeVersionRange" to forgeVersionRange,
        "loaderVersionRange" to loaderVersionRange,
        "modId" to modId, "modName" to modName, "modLicense" to modLicense, "modVersion" to modVersion,
        "modIssueTracker" to modIssueTracker, "modHomepage" to modHomepage, "modCredits" to modCredits,
        "modAuthors" to modAuthors, "modDescription" to modDescription, "packFormatNumber" to packFormatNumber,
        "spartanWeaponryVersion" to spartanWeaponryVersion,
        "spartanToolkitVersion" to spartanToolkitVersion, "spartanToolkitLimit" to spartanToolkitLimit,
        "gobberVersion" to gobberVersion
    )
    inputs.properties(replaceProperties)

    filesMatching(listOf("META-INF/mods.toml", "pack.mcmeta")) {
        expand(replaceProperties + mapOf("project" to project))
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named<Jar>("jar") {
    manifest {
        attributes(
            mapOf(
                "Specification-Title" to modId,
                "Specification-Vendor" to modAuthors,
                "Specification-Version" to "1", // We are version 1 of ourselves
                "Implementation-Title" to project.name,
                "Implementation-Version" to archiveVersion.get(),
                "Implementation-Vendor" to modAuthors,
                "Implementation-Timestamp" to DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssZ")
                    .format(ZonedDateTime.now())
            )
        )
    }
}

tasks.withType<JavaCompile>().configureEach {
    options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
}

